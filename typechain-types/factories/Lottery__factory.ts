/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610975806100616000396000f3fe6080604052600436106100435760003560e01c806312065fe01461018e5780638e7ea5b2146101b9578063f71d96cb146101d0578063f851a4401461020d57610189565b3661018957670de0b6b3a7640000341015610093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008a9061076c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011b9061070c565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550005b600080fd5b34801561019a57600080fd5b506101a3610238565b6040516101b0919061078c565b60405180910390f35b3480156101c557600080fd5b506101ce610240565b005b3480156101dc57600080fd5b506101f760048036038101906101f291906105ca565b61046f565b60405161020491906106f1565b60405180910390f35b34801561021957600080fd5b506102226104ae565b60405161022f91906106f1565b60405180910390f35b600047905090565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c79061074c565b60405180910390fd5b60036000805490501015610319576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103109061072c565b60405180910390fd5b60008060008054905061032a6104d4565b61033491906107fe565b8154811061036b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc6103ba610238565b9081150290604051600060405180830381858888f193505050501580156103e5573d6000803e3d6000fd5b50600067ffffffffffffffff811115610427577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104555781602001602082028036833780820191505090505b506000908051906020019061046b92919061050e565b5050565b6000818154811061047f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600044426000805490506040516020016104f0939291906106b4565b6040516020818303038152906040528051906020012060001c905090565b828054828255906000526020600020908101928215610587579160200282015b828111156105865782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061052e565b5b5090506105949190610598565b5090565b5b808211156105b1576000816000905550600101610599565b5090565b6000813590506105c481610928565b92915050565b6000602082840312156105dc57600080fd5b60006105ea848285016105b5565b91505092915050565b6105fc816107b8565b82525050565b600061060f6018836107a7565b915061061a8261085e565b602082019050919050565b6000610632602f836107a7565b915061063d82610887565b604082019050919050565b60006106556015836107a7565b9150610660826108d6565b602082019050919050565b60006106786014836107a7565b9150610683826108ff565b602082019050919050565b610697816107ea565b82525050565b6106ae6106a9826107ea565b6107f4565b82525050565b60006106c0828661069d565b6020820191506106d0828561069d565b6020820191506106e0828461069d565b602082019150819050949350505050565b600060208201905061070660008301846105f3565b92915050565b6000602082019050818103600083015261072581610602565b9050919050565b6000602082019050818103600083015261074581610625565b9050919050565b6000602082019050818103600083015261076581610648565b9050919050565b600060208201905081810360008301526107858161066b565b9050919050565b60006020820190506107a1600083018461068e565b92915050565b600082825260208201905092915050565b60006107c3826107ca565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000610809826107ea565b9150610814836107ea565b9250826108245761082361082f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f41646d696e2063616e6e6f742070617274696369706174650000000000000000600082015250565b7f5468657265206d757374206265206174206c65617374203320706c617965727360008201527f20696e20746865206c6f74746572790000000000000000000000000000000000602082015250565b7f596f7520617265206e6f74207468652061646d696e0000000000000000000000600082015250565b7f4d696e2031206574686572207265717569726564000000000000000000000000600082015250565b610931816107ea565b811461093c57600080fd5b5056fea2646970667358221220c2aaa011efd4e65cb6caeb8ec4608d7207fd1025eae4c41c32dbdbffeba06e2a64736f6c63430008040033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lottery> {
    return super.deploy(overrides || {}) as Promise<Lottery>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
